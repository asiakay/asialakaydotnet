
[Express Tutorial Part 6: Working with forms](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/forms)

An HTML Form is 
    - a group of one or more fields/widgets on a web page that 
        - can be used to collect information from users 
            - for submission to a server. 
            
    - a flexible mechanism for collecting user input 
        - because there are suitable form inputs available for entering many different types of data
            — text boxes, 
            - checkboxes, 
            - radio buttons, 
            - date pickers, 
            - etc. 

    - a relatively secure way of sharing data with the server, 
        - as they allow us to send data in POST requests 
            - with cross-site request forgery protection.

Working with forms can be complicated! 
    - Developers need to write HTML for the form, 
    - validate and properly sanitize entered data on the server 
        - (and possibly also in the browser), 
        - repost the form with error messages 
            - to inform users of any invalid fields, 
        - handle the data when it has successfully been submitted, 
        - and finally respond to the user in some way to indicate success.

In this tutorial, we're going to show you 
    - how the above operations may be performed 
        - in Express.  
        - we'll extend the LocalLibrary website to 
            - allow users to 
                - create, 
                - edit 
                - delete items from the library.
                
1. install express-validator

```zsh
npm install express-validator
```

```zsh
npm install --save express express-validator
```


----------------------


[How to Convert HTML Form Field Values to a JSON Object](https://www.learnwithjason.dev/blog/get-form-values-as-json)


Use built-in browser APIs to 
    - get form values as JSON. 
        - can be a little confusing
        - Browsers have implemented a built-in API for getting form values
            - Use the FormData API to access form values in JavaScript
                - lets us access any field value in a submitted form 
                    - using a straightforward API.
    - Zero dependencies and only a few lines of code!

```HTML

<form>
    <label for="email">Email</label>
    <input type="email" name="email" id="email" />

    <button type="submit">Submit</button>
    </form>
```


```JavaScript
    <!-- to handle submissions in JS, use the FormDataAPI below -->
    <script>
        function handleSubmit(event){
            event.preventDefault();
            const data = new FormData(event.target);
            const value = data.get('email');
            console.log({ value });
        }
        const form = document.querySelector('form');
        form.addEventListener('submit', handleSubmit);
    </script>
    ```
- If we run this code and 
- submit the form, 
- the value we enter into the email input will be logged.

***But where tho?***

```html
<form>
    <!-- name  -->
    <label for="name">Name</label>
    <input type="text" name="name" id="name" />

<!-- email -->
    <label for="email">Email</label>
    <input type="email" name="email" id="email" />




    <!-- submit -->
    <button type="submit">Submit</button>
    </form>


    <!-- show results -->
    <div class="results">
        <h2>Form Submission</h2>
        <pre></pre>
      </div>
```

```JavaScript
    <!-- to handle submissions in JS, use the FormDataAPI below -->
    <script>
        function handleSubmit(event){
            
            event.preventDefault();
            
            const data = new FormData(event.target);

            const value = Object.fromEntries(data.entries());

            console.log({ value });

            /* const value = data.get('email'); */            
        }
        const form = document.querySelector('form');
        form.addEventListener('submit', handleSubmit);
    </script>
```


The FormData API 
    - doesn’t directly convert form values to JSON, 
    - but we can get there 
        - by using the entries method 
        - and passing its return value 
            - to Object.fromEntries, which returns 
                - a plain JavaScript object.
                - compatible with JSON.stringify, 
                - so we can use it for 
                    - sending JSON-encoded data 
                    - to APIs 
                        - or any other thing we might want to do with a JavaScript object.



Get multi-select values like checkboxes as JSON with the FormData API

    - The fromEntries approach in the previous section 
     - works great for most form inputs, 
     - but if the input allows multiple values 
        — such as a checkbox 
            — we'd only see one value in the resulting object.

    = Fortunately, the workaround for this only 
        - requires one more line of JavaScript 
            - for each multi-value input.

Let's add a field with multiple potential values to our form:








How to use fetch to POST form data as JSON to your API
https://simonplend.com/how-to-use-fetch-to-post-form-data-as-json-to-your-api/




https://medium.com/@msudeep.joel/using-nodemailer-to-send-email-in-node-js-ee7deba5b3d7

install body-parser middlewares

How To Use EJS to Template Your Node Application
https://www.digitalocean.com/community/tutorials/how-to-use-ejs-to-template-your-node-application




------------------------------



How To Make Contact Forms for Your Website Using Nodemailer
https://betterprogramming.pub/how-to-make-contact-forms-for-your-website-using-nodemailer-74739b186264

Use the powerful Node.js module without enabling less secure apps on your Gmail account






